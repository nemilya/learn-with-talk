<a href="/content/<%= @content.id %>">back</a><br>
<h2><%= @content.title %></h2>
<i><%= @content.url %></i>
<br>
<br>
<%= erb :'content/_player2' %>
<br>

<script>
function playerSeekTo(sec){
  player.pauseVideo();
  player.seekTo(sec);
  player.playVideo();
}
function playerGetCurrentTime(){
  let player_state = player.getPlayerState();
  if (player_state == -1 || player_state == 1 || player_state == 2){
    return player.getCurrentTime();
  };
  return 0.0;
}
</script>

<div id="subtitles">
<br>
  <button @click="setModeShowAll()">show all subtitles</button>
  &nbsp;
  <button @click="setModeShowPartial()">show partial</button>

  <table>
  <tr>
    <td>
  <v-template v-for="(subtitle, pos) in subtitles">
    <div v-if="showPos(pos)" style="padding: 5px;">
      <a style="text-decoration: none; font-size: 10pt; color: #c0c0c0;" href="#" v-on:click.prevent="seekTo(subtitle.begin); current_pos = pos;">&gt;</a>
      <span style="padding-left: 5px" v-bind:style="pos == current_pos ? 'background-color: #fdfda5' : ''">{{subtitle.text}}</span>
      <a href="#" style="font-size: 10pt; color: #ccc; text-decoration: none; padding-left: 3px" @click.prevent="showFormAdd(pos)">+</a>
    </div>
  </v-template>
    </td>
    <td>
  <v-template v-for="(subtitle, pos) in subtitles">
    <div v-show="showPos(pos)" style="padding: 5px;">
      &nbsp;
      <span v-if="pos == add_word_at_pos">
        <input size="10" type="text" v-model="word" :id="'input_word_'+pos" />
        /
        <input size="10" type="text" v-model="translation" @keyup.enter="addWord()" />
        &nbsp;
        <a style="font-size: 10pt" href="#" @click.prevent="addWord()">add</a>
        &nbsp;
        <a style="font-size: 10pt" href="#" @click.prevent="cancelFormAdd()">cancel</a>
      </span>
      <v-template v-for="word in words">
        <span v-if="word.content_id == <%= @content.id %> && word.pos == pos && word.archived == ''" style="color: gray">
          {{word.word}}
          <span style="font-size: 9pt; padding-right: 5px">/ {{word.translation}}</span>
          <a style="font-size: 8pt; color: gray" href="#" @click.prevent="word.archived = 'true'">x</a>
        </span>
      </v-template>
    </div>
  </v-template>
    </td>
  </tr>
  </table>
</div>

<script>
const Subtitles = {
  data() {
    return {
      mode: 'show_all',
      subtitles: <%= @subtitles.to_json %>,
      offset_sec: '',
      current_pos: -1,
      add_word_at_pos: -1,
      word: "",
      translation: "",
      words: [] // { word: "...", translation: "...", content_id: 123, pos: "...", archived: "" }
    }
  },
  methods: {
    getSelectedText(){
      var sel_obj = window.getSelection();
      var sel_text = sel_obj.toString();
      return sel_text;
    },
    showFormAdd(pos){
      let selected_text = this.getSelectedText();
      if (selected_text != ''){
        this.word = selected_text;
      };      
      this.add_word_at_pos = pos;
      this.$nextTick(() =>
        this.focusInputWord(pos)
      );
    },
    cancelFormAdd(){
      this.add_word_at_pos = -1;
      this.word = "";
    },
    focusInputWord(pos){
      document.getElementById("input_word_"+pos).focus();
    },
    addWord(){
      let word = {
        word:        this.word,
        translation: this.translation,
        content_id:  <%= @content.id %>,
        pos:         this.add_word_at_pos,
        archived:    ""
      };
      this.words.push(word);
      this.word = "";
      this.translation = "";
      this.add_word_at_pos = -1;
    },
    showPos(pos){
      if (this.mode == 'show_all'){
        return true;
      } 
      else if (this.mode == 'show_partial'){
        let lines_around = 2;
        if (pos >= (this.current_pos-lines_around) && pos <= (this.current_pos+lines_around)){
          return true;
        }
      }
      return false;
    },
    seekTo(sec){
      playerSeekTo(sec);
    },
    setOffsetSec(){
      this.offset_sec = playerGetCurrentTime();
    },
    setModeShowAll(){
      this.mode = 'show_all';
    },
    setModeShowPartial(){
      this.setOffsetSec();
      this.setSubtitlePosition();
      this.mode = 'show_partial';
    }, 
    setSubtitlePosition(){
      let seek_sec = parseFloat(this.offset_sec);
      if (Number.isNaN(seek_sec)){
        this.current_pos = -1;
      }
      else {
        this.current_pos = this.searchSubtitlePos(seek_sec);
      };
    },
    searchSubtitlePos(sec){
      for (let pos = 0; pos < this.subtitles.length; pos++){
        if (this.subtitles[pos].begin < sec && this.subtitles[pos].end > sec){
          return pos;
        }
      }
      return -1;
    }
  },
  // localStorage
  watch: {
    words: {
      handler() {
        localStorage.setItem('words', JSON.stringify(this.words));
      },
      deep: true,
    },
  },
  mounted(){
    if (localStorage.getItem('words')){
      this.words = JSON.parse(localStorage.getItem('words'));
    }
  }
}

Vue.createApp(Subtitles).mount('#subtitles')
</script>

